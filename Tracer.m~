clear 
close all

TeleDynADCP

%% Here we set the parameters for advection and advect the tracers

day_r = 4; % on how many days are the particles advected

days = round(dt*mes/60/60/24);
nb_of_realeases = floor(days/day_r); 
stp = 1+fix(1800/dt);          %set the time step to a minimum of 30mins
partition = day_r/dt*60*60*24; % subdivide the time 
n = floor(sqrt(nb_of_sensors));
r = 1
disp(['nb sensors: ' num2str(nb_of_sensors) ', release every ' ...
    num2str(day_r) ' days, measurement time [days]: ' num2str(days)])

figure('units', 'normalized', 'outerposition', [0 0 1 1])

for j = 1:nb_of_sensors
cnt = 1;
subplot(n,n,j)
hold on
plot(cos(1000*0:2pi),1000*sin(0,2pi))
txt = 'N';
text(1000*cos(pi/2),sin(pi/2),txt)
txt = 'E';
text(cos(0),sin(0),txt)
txt = 'S';
text(cos(pi),sin(pi),txt)
txt = 'W';
text(cos(3/2*pi),sin(3/2*pi),txt)

for k = 1:nb_of_realeases
k = k-1;
x = zeros(nb_of_sensors,1) ; y = zeros(nb_of_sensors,1);

for i = 2:stp:partition
    angle = (360-thetha(i,j)+90)/360*(2*pi);
    try
        x(j) = x(j) + v((i+partition*k),j)*cos(angle)*dt*stp;
        y(j) = y(j) + v((i+partition*k),j)*sin(angle)*dt*stp;
    catch
        disp('there was an error, moving on')
    end
    
    th = atan(y(j)/x(j));
    dist = sqrt(x(j)^2+y(j)^2);
    if 900 < dist && 1100>dist
        
        X(j,cnt) = x(j); % cnt is to save the values which hit
        Y(j,cnt) = y(j);% the condition of 1km
        
        scatter(1000*cos(th),1000*sin(th))
        xlabel('W - E [m]'); ylabel('S - N [m]');
        title(['sensor n ' num2str(j) ' , ' num2str(altitude(j)) ' [m]'])
        xlim([-1200 1200])
        ylim([-1200 1200])
        
        cnt = cnt+1;
    end
end
end
end